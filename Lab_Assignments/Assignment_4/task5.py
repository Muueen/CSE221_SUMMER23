# -*- coding: utf-8 -*-
"""task5.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1ZRhVcdIIfr5cQOatRObMOeK463-HhA7Q
"""

infile = open("/content/drive/MyDrive/cse221_ass04/input5_3.txt", "r")
outfile = open("/content/drive/MyDrive/cse221_ass04/output5_3.txt", "w")

l = infile.readlines()
nm = list(map(int, l[0].split(" ")))
n = nm[0]
dest = nm[2]
for elem in l:
    elem = elem.strip("\n")

def adjL(l):
    dic = {}
    for e2 in range(1, len(l)):
        l[e2] = list(map(int, l[e2].split(" ")))
        i = l[e2][0]
        j = l[e2][1]
        if i in dic:
            dic[i].append(j)
        else:
            dic[i] = [j]
        if j not in dic:
            dic[j] = []
    return dic
g = adjL(l)
def path(graph, start, target):
    queue = [(start, [start])]
    visited = [False] * (len(graph) + 1)

    front = 0
    rear = 1

    while front < rear:
        node, path = queue[front]
        front += 1
        if node == target:
            return len(path) - 1, path
        visited[node] = True
        for neighbor in graph[node]:
            if not visited[neighbor]:
                queue.append((neighbor, path + [neighbor]))
                rear += 1
    return

time, p = path(g, 1, dest)

l0 = ""
for i in range(len(p)-1):
    l0 += str(p[i]) + " "
l0 += str(p[len(p)-1])
l1 = f"Time: {time}"
l2 = f"Shortest Path: {l0}"
line = l1 + "\n" + l2
outfile.writelines(line)