# -*- coding: utf-8 -*-
"""task2.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1vRWx4BP__DHB2IUv6S6ophtdimag2Edj
"""

#Task_2
infile = open("/content/drive/MyDrive/cse221_ass01/input2.txt", "r")
outfile = open("/content/drive/MyDrive/cse221_ass01/output2.txt", "w")

l = infile.readlines()
arr = list(map(int, l[1].split(" ")))
def bubbleSort(arr):
    n = len(arr)
    for i in range(n):
        swapped = 0
        for j in range(n-1-i):
            if arr[j] > arr[j+1]:
                arr[j], arr[j+1] = arr[j+1], arr[j]
                swapped = 1
        if swapped == 0:
            break
    return arr
str_arr = ""
sorted = bubbleSort(arr)
for i in range(len(sorted)-1) : str_arr += str(sorted[i]) + " "
str_arr += str(sorted[len(sorted)-1])
outfile.writelines(str_arr)

#Best case scenerio for the bubble sort is if the given array is already sorted.
#For detecting if the array is sorted or not I'm using a flag. If the given
#array is sorted there won't be any swap, we will know it by our flag by traversing
#the array only once and then break the outer loop.
#As it's traversing the array only once, the time complexity for this will be O(n).

