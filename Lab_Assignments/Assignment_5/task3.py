# -*- coding: utf-8 -*-
"""task3.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1LZNmCPqm8b6Fsqkpu85JTbe-Kk833F3A
"""

infile = open("/content/drive/MyDrive/cse221_ass05/input3_2.txt", "r")
outfile = open("/content/drive/MyDrive/cse221_ass05/output3_2.txt", "w")

l = infile.readlines()
nm = list(map(int, l[0].split(" ")))
n = nm[0]
for elem in l:
    elem = elem.strip("\n")
def adjL(l):
    dic = {}
    for e2 in range(1, len(l)):
        l[e2] = list(map(int, l[e2].split(" ")))
        i = l[e2][0]
        j = l[e2][1]
        if i in dic:
            dic[i].append(j)
        else:
            dic[i] = [j]
        if j not in dic:
            dic[j] = []
    for i in range(1, n+1):
        if i not in dic:
            dic[i] = []
    return dic
g = adjL(l)
def dfs(graph, vertex, visited, stack):
    visited[vertex] = True
    for neighbor in graph[vertex]:
        if not visited[neighbor]:
            dfs(graph, neighbor, visited, stack)
    stack.append(vertex)

def dfs_transpose(graph, vertex, visited, component):
    visited[vertex] = True
    component.append(vertex)

    for neighbor in graph[vertex]:
        if not visited[neighbor]:
            dfs_transpose(graph, neighbor, visited, component)

def scc(graph):
    n = len(graph)
    visited = {}
    for i in range(1, n+1):
        visited[i] = False
    stack = []
    for vertex in graph:
        if not visited[vertex]:
            dfs(graph, vertex, visited, stack)

    gt = {}
    for i in range(1, n+1):
        gt[i] = []
    for vertex in graph:
        for neighbor in graph[vertex]:
            gt[neighbor].append(vertex)

    visited = {}
    for i in range(1, n+1):
        visited[i] = False
    scc_arr = []

    while stack:
        vertex = stack.pop()
        if not visited[vertex]:
            component = []
            dfs_transpose(gt, vertex, visited, component)
            scc_arr.append(component)

    return scc_arr

result = scc(g)
line = ""
for i in result:
    for j in i:
        line += str(j) + " "
    line += "\n"
outfile.writelines(line)