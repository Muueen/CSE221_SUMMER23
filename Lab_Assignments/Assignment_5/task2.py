# -*- coding: utf-8 -*-
"""task2.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1LZNmCPqm8b6Fsqkpu85JTbe-Kk833F3A
"""

class Queue:
    def __init__(self):
        self.items = []

    def enqueue(self, item):
        self.items.append(item)

    def dequeue(self):
        return self.items.pop(0)

    def is_empty(self):
        return len(self.items) == 0
infile = open("/content/drive/MyDrive/cse221_ass05/input2_3.txt", "r")
outfile = open("/content/drive/MyDrive/cse221_ass05/output2_3.txt", "w")

l = infile.readlines()
nm = list(map(int, l[0].split(" ")))
n = nm[0]
for elem in l:
    elem = elem.strip("\n")
def adjL(l):
    indig = [0] * (n+1)
    dic = {}
    for e2 in range(1, len(l)):
        l[e2] = list(map(int, l[e2].split(" ")))
        i = l[e2][0]
        j = l[e2][1]
        indig[j] += 1
        if i in dic:
            dic[i].append(j)
        else:
            dic[i] = [j]
        if j not in dic:
            dic[j] = []
    return dic, indig
g, indig = adjL(l)
def topological_ord(N, graph, indig):
    queue = Queue()
    for i in range(1, N+1):
        if indig[i] == 0:
            queue.enqueue(i)
    queue.items.sort()
    order = []
    while not queue.is_empty():
        node = queue.dequeue()
        order.append(node)
        for neighbor in graph[node]:
            indig[neighbor] -= 1
            if indig[neighbor] == 0:
                queue.enqueue(neighbor)
        queue.items.sort()

    if len(order) != N:
        return "IMPOSSIBLE"
    return order

result = topological_ord(n, g, indig)
line = ""
if result == "IMPOSSIBLE":
    line = "IMPOSSIBLE"
else:
    for i in range(len(result)-1):
        line += str(result[i]) + " "
    line += str(result[i+1])
outfile.writelines(line)