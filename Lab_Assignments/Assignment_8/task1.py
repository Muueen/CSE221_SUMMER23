# -*- coding: utf-8 -*-
"""task1.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1LZNmCPqm8b6Fsqkpu85JTbe-Kk833F3A
"""

input_file = open("/content/drive/MyDrive/cse221_ass08/input1_1.txt", "r")
output_file = open("/content/drive/MyDrive/cse221_ass08/output1_1.txt", "w")

def search(group, node):
    if group[node] == node:
        return node
    return search(group, group[node])

def min_cost(adj_list):
    paths = []
    for node_u, connections in adj_list.items():
        for node_v, cost in connections:
            paths.append((node_u, node_v, cost))

    paths.sort(key=get_cost)  # Sort paths by cost
    total_expense = 0
    group = list(range(len(adj_list)))  # Group initialization
    selected_paths = []

    for path in paths:
        node1, node2, cost = path
        group1, group2 = search(group, node1 - 1), search(group, node2 - 1)
        if group1 != group2:
            selected_paths.append(path)
            group[group1] = group2
            total_expense += cost
    return total_expense

def get_cost(path):
    return path[2]

l = input_file.readlines()
nm = list(map(int, l[0].split(" ")))
n = nm[0]
m = nm[1]
def adjL(l):
    dic = {}
    for e2 in range(1, len(l)-1):
        l[e2] = list(map(int, l[e2].split(" ")))
        i = l[e2][0]
        j = l[e2][1]
        w = l[e2][2]
        if i in dic:
            dic[i].append((j, w))
        else:
            dic[i] = [(j, w)]
        if j not in dic:
            dic[j] = []
    return dic
adj_list = adjL(l)
final_result = min_cost(adj_list)
output_file.write(str(final_result))
input_file.close()
output_file.close()