# -*- coding: utf-8 -*-
"""task3.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1LZNmCPqm8b6Fsqkpu85JTbe-Kk833F3A
"""

infile = open("/content/drive/MyDrive/cse221_ass06/input3_2.txt", "r")
outfile = open("/content/drive/MyDrive/cse221_ass06/output3_2.txt", "w")

l = infile.readlines()
nm = list(map(int, l[0].split(" ")))
n = nm[0]
m = nm[1]
for elem in l:
    elem = elem.strip("\n")
def adjL(l):
    dic = {}
    for e2 in range(1, len(l)):
        l[e2] = list(map(int, l[e2].split(" ")))
        i = l[e2][0]
        j = l[e2][1]
        w = l[e2][2]
        if i in dic:
            dic[i].append((j, w))
        else:
            dic[i] = [(j, w)]
        if j not in dic:
            dic[j] = []
    return dic
g = adjL(l)

def find_paths(graph, node, destination, visited, path, all_paths):
    if node == destination:
        all_paths.append((path[:]))
        return
    visited[node] = True
    for neighbor, weight in graph[node]:
        if not visited[neighbor]:
            path.append((neighbor, weight))
            find_paths(graph, neighbor, destination, visited, path, all_paths)
            path.pop()
    visited[node] = False
s, d = 1, n
visited = {}
for node in g.keys():
    visited[node] = False
all_paths = []

find_paths(g, s, d, visited, [(s, 0)], all_paths)
ll = []
lll = []
for i in all_paths:
    for j in i:
        ll.append(j[1])
    lll.append(ll)
    ll = []
mini = []
for i in lll:
    mini.append(max(i))
line = str(min(mini))
outfile.writelines(line)